<?xml version="1.0"?> 
<!DOCTYPE rfc SYSTEM "rfc2629.dtd" [ 
  <!ENTITY rfc2119 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2119.xml'>
  <!ENTITY rfc2616 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.2616.xml'>
  <!ENTITY rfc5785 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5785.xml'>
  <!ENTITY rfc5988 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5988.xml'>
  <!ENTITY rfc4627 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4627.xml'>
  <!ENTITY rfc3986 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3986.xml'>
  <!ENTITY rfc3987 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3987.xml'>
  <!ENTITY rfc6068 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6068.xml'>
  <!ENTITY rfc4288 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4288.xml'>
  <!ENTITY rfc5646 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.5646.xml'>
  <!ENTITY rfc6350 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.6350.xml'>
  <!ENTITY rfc3339 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.3339.xml'>
  <!ENTITY rfc4647 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml/reference.RFC.4647.xml'>
  <!ENTITY acct PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml3/reference.I-D.draft-ietf-appsawg-acct-uri-01.xml'>
  <!ENTITY cors PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml4/reference.W3C.WD-cors-20120403.xml'>
  <!ENTITY ieee1284 PUBLIC '' 'http://xml.resource.org/public/rfc/bibxml2/_reference.IEEE.1284-1.1997.xml'>
]>
<?rfc toc="yes"?> 
<?rfc strict="yes"?> 
<?rfc symrefs="yes" ?> 
<?rfc sortrefs="yes"?> 
<?rfc compact="yes"?> 
<rfc category="std" ipr="trust200811" docName="draft-ietf-appsawg-webfinger-08"> 
  <front> 
    <title abbrev="draft-ietf-appsawg-webfinger"> 
      WebFinger
    </title> 
 
    <author initials="J.M." surname="Snell" fullname="James M Snell" role="editor"> 
      <organization abbrev="IBM">IBM</organization>
      <address> 
        <email>jasnell@gmail.com</email> 
      </address> 
    </author> 
    
    <author initials="P.E." surname="Jones" fullname="Paul E. Jones">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>7025 Kit Creek Rd.</street>
          <city>Research Triangle Park, NC 27709</city>
          <country>USA</country>
        </postal>
        <phone>+1 919 476 2048</phone>
        <email>paulej@packetizer.com</email>
        <uri>xmpp:paulej@packetizer.com</uri>
      </address>
    </author>
    
    <author initials="G." surname="Salgueiro" fullname="Gonzalo Salgueiro">
      <organization abbrev="Cisco">Cisco Systems, Inc.</organization>
      <address>
        <postal>
          <street>7025 Kit Creek Rd.</street>
          <city>Research Triangle Park, NC 27709</city>
          <country>USA</country>
        </postal>
        <phone>+1 919 392 3266</phone>
        <email>gsalguei@cisco.com</email>
        <uri>xmpp:gsalguei@cisco.com</uri>
      </address>
    </author>
    
    <author initials="J." surname="Smarr" fullname="Joseph Smarr"> 
      <organization abbrev="Google">Google</organization>
      <address> 
        <email>jsmarr@google.com</email> 
      </address> 
    </author> 
    
    <date month="December" year="2012" /> 
 
    <area>Applications</area> 
    <workgroup>Applications Area Working Group</workgroup> 
    <keyword>I-D</keyword> 
    <keyword>http</keyword>
 
    <abstract> 
      <t>This specification defines the WebFinger protocol, which can 
      be used to discover information about people or other entities 
      on the Internet using standard HTTP methods.</t>      
    </abstract> 
 
  </front> 
  
  <middle> 
    
    <section title="Introduction" anchor="introduction">
    
      <t>The WebFinger Protocol enables the discovery of information 
      about identifiable resources associated with a host.  Discovery
      involves issuing a single HTTP GET request to the well-known 
      <xref target="RFC5785"/> "webfinger" resource at the target host 
      and receiving back a JavaScript Object Notation (JSON) <xref target="RFC4627"/> 
      Resource Descriptor (JRD) (see <xref target="jrd"/>) containing links 
      and metadata pertaining to a single entity.</t>

      <t>Information returned via WebFinger might be for direct human
      consumption (e.g., looking up someone's phone number), or it can be
      used by systems to help carry out some operation (e.g., facilitate
      logging into a web site by determining a user's identity service).</t>

      <t>Non-normative example uses of the WebFinger Protocol are illustrated 
      in <xref target="examples"/>.</t>
      
      <t>The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
      "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY", and "OPTIONAL" in this
      document are to be interpreted as described in <xref target="RFC2119"/>.</t>

    </section>
        
    <section title="WebFinger Protocol" anchor="webfinger-protocol">
      
      <t>WebFinger is a simple HTTP-based web service that returns a JSON
      Resource Descriptor (JRD) document containing information about an 
      entity associated with a host.</t>
      
      <t>WebFinger requests are issued in the form of an HTTP GET method
      sent to the ".well-known" <xref target="RFC5785" /> resource 
      "/.well-known/webfinger". All requests MUST contain exactly one 
      "resource" query string parameter whose value is an absolute 
      URI <xref target="RFC3986"/> or IRI <xref target="RFC3987"/> 
      that identifies the resource for which information is being 
      requested. If the "resource" parameter is absent or malformed, 
      the WebFinger server MUST return a 400 (Bad Request) status 
      in response to the GET request.</t>
      
      <figure><preamble>An example WebFinger request for information 
        about a specific user:</preamble><artwork><![CDATA[
  GET /.well-known/webfinger?resource=acct:joe@example.org HTTP/1.1
  Host: example.org
        ]]></artwork></figure>
        
      <t>The identifier specified by the "resource" parameter can 
        utilize any scheme. For resources associated with a user account 
        at a host, use of the "acct" URI scheme <xref target="I-D.ietf-appsawg-acct-uri"/> 
        is RECOMMENDED since it explicitly identifies an account accessible 
        via WebFinger. It is possible that any individual resource 
        can be identified by multiple identifiers. In such cases,
        the JSON Resource Descriptor document SHOULD contain the complete
        listing of "aliases" for the resource as described in 
        <xref target="jrd-aliases"/>.</t>

      <t>An additional "rel" query string parameter MAY be added to 
      the request URI to identify a specific subset of information 
      to return within the JSON Resource Descriptor as defined in
      <xref target="rel-parameter"/>.</t>
        
      <t>A successful response to a WebFinger request will consist of either:
        <list style="symbols">
          <t>An HTTP 200 (Ok) response containing, by default, a JSON Resource 
          Descriptor document as described in <xref target="jrd"/>, or</t>
          <t>An HTTP 3xx redirection to a different URI that when dereferenced,
          returns, by default, a JSON Resource Descriptor document.</t>
        </list>
      </t>
      
      <t>If a JSON Resource Descriptor document is not desired, the client MAY 
      include an "Accept" request header identifying the desired alternative representation.
      However, no other representations are defined by this specification. The MIME
      media type used for the JSON Resource Descriptor document formation is 
      "application/json" as defined by <xref target="RFC4627" />.</t>
      
      <t>If the client queries the WebFinger service for information about a 
      resource for which the service has no information, or for which the 
      client is not authorized to request information, the server MUST return 
      a 404 (Not Found) status code.</t>

      <t>WebFinger services can include cache validators in a response to 
      enable conditional requests by clients and/or expiration times as per
      <xref target="RFC2616"/>, Section 13.</t>
        
      <section title="Using HTTPS with WebFinger" anchor="tls">
        
        <t>When first establishing a connection to a WebFinger service, 
        clients MUST use HTTPS and SHOULD NOT utilize HTTP unless an HTTPS
        connection cannot be established. Hosts providing WebFinger services
        MUST enforce the use of HTTPS if the information contained within 
        the requested JSON Resource Descriptor document can be used in any 
        manner that can compromise user security or privacy.</t> 
      
        <t>For instance, as illustrated in <xref target="example-identity"/>, WebFinger can 
        be used by a client application to discover an identity service 
        for a given user. To help protect the user against being misdirected
        to rogue web sites capable of stealing the user's credentials or 
        otherwise compromising their security or privacy, the server is 
        required to enforce the use of HTTPS by any client requesting access
        to the WebFinger resource.</t>
      
        <t>If the WebFinger service provides an invalid certificate, or a request
        sent initially over HTTPS returns an HTTP status code indicating an error
        of any kind, the client MUST NOT use HTTP in an attempt to complete the
        discovery as doing so might compromise user security or privacy.</t>
      
        <t>If the WebFinger service returns a 3xx redirection in response to 
        a WebFinger request that was sent over an HTTPS connection, the new 
        target URL specified by the Location response header MUST be an HTTPS
        URL.</t>

      </section>
            
      <section title="The &quot;rel&quot; Parameter" anchor="rel-parameter">
        
        <t>When issuing a request to the server, the client MAY utilize the
        "rel" query string parameter to request a subset of the information that
        would otherwise be returned without the "rel" parameter. The value of the 
        "rel" parameter is either a registered or unregistered link relation as 
        defined by <xref target="RFC5988"/>.</t>
        
        <t>When the "rel" parameter is used, the returned JSON Resource Descriptor 
        document MUST only contain information pertaining to links matching the link
        relations identified by the "rel" query string parameter, or general
        metadata applying to the resource as a whole.</t>

        <t>Multiple instances of the "rel" parameter MAY be included in the request URI 
        in order to request multiple types of link relations.</t>

        <figure><preamble>For example:</preamble><artwork><![CDATA[
  GET /.well-known/webfinger?
    resource=acct%3Abob%40example.com&
    rel=http%3A%2F%2Fwebfinger.net%2Frel%2Fprofile-page&
    rel=vcard HTTP/1.1
  Host: example.com
]]></artwork></figure>

        <t>In this example, the client requests the link relations of type
        "http://webfinger.net/rel/profile-page" and "vcard".  The server then
        responds with a message similar to the following:</t>

        <figure><artwork><![CDATA[
  HTTP/1.1 200 OK
  Access-Control-Allow-Origin: *
  Content-Type: application/json; charset=UTF-8

  {
    "expires" : "2012-11-16T19:41:35Z",
    "subject" : "acct:bob@example.com",
    "aliases" : [
      "http://www.example.com/~bob/",
      "https://www.example.com/~bob/"
    ],
    "properties" : {
      "http://example.com/rel/role/" : "employee"
    },
    "links" : [
      {
        "rel" : "http://webfinger.net/rel/profile-page",
        "href" : "https://www.example.com/~bob/"
      },
      {
        "rel" : "vcard",
        "href" : "https://www.example.com/~bob/bob.vcf"
      }
    ]
  }
]]></artwork></figure>

        <t>As illustrated, the server returned only the link relations requested
        by the client, but also included the other parts of the JRD.</t>

        <t>In the event that a client requests links for link relations that are
        not defined for the specified resource, a resource descriptor is still
        returned.  In the returned JRD, the "links" array MAY be absent,
        empty, or contain only links that did match a provided "rel" value.
        The server MUST NOT return a 404 status code when a particular link
        relation specified via "rel" is not defined for the resource, as a
        404 status code is reserved for indicating that the resource itself
        (e.g., either /.well-known/webfinger or the resource indicated via
        the "resource" parameter) does not exist.</t>
        
        <t>Use of the "rel" parameter can reduce processing requirements on either 
        the client or server, and it might also reduce the bandwidth required to convey 
        the partial resource descriptor, especially if there are numerous link relation 
        values to convey for a given resource.</t>

        <t>Support for the "rel" parameter is OPTIONAL, but RECOMMENDED on the
        server.  Should the server not support the "rel" parameter, it MUST
        ignore it and process the request as if no "rel" parameter values
        were present.</t>
        
      </section>
      
    </section> <!-- END WEBFINGER PROTOCOL -->
    
      <section title="The JSON Resource Descriptor (JRD)" anchor="jrd">
        
        <t>The JSON Resource Descriptor (JRD) is a JSON document as defined in 
        <xref target="RFC4627"/> whose root is an object containing exactly one
        "subject" member and optionally containing the additional members: "expires",
        "aliases", "properties" and "links" -- each of which are described in the 
        sections that follow.</t>

        <t>Implementations are free to include additional members not defined by
        this specification anywhere within a JRD document. When processing a JRD, 
        the client MUST ignore any unknown member and not treat the presence of 
        an unknown member as an error.</t>

        <section title="expires" anchor="jrd-expires">
          
          <t>The value of the "expires" member is a string conforming to the 
          <xref target="RFC3339"/> date-time construction that indicates the date
          and time after which the information provided by the JRD is no longer 
          to be considered valid.</t>
          
          <t>Within the value, an uppercase "T" character MUST be used to separate 
          date and time, and an uppercase "Z" character MUST be present in the absence 
          of a specific numeric time zone offset.</t>

          <figure><preamble>For example:</preamble><artwork><![CDATA[
  {
    ...
    "expires" : "2012-11-16T19:41:35Z"
    ...
  }
]]></artwork></figure>

        </section>
        
        <section title="subject" anchor="jrd-subject">
          
          <t>The value of the "subject" member is a string whose value is either
          an absolute URI or IRI that identifies the resource to which the information
          contained within the JRD document applies. Typically, but not always, this 
          value will be equivalent to the identifier specified by the "resource" query 
          string parameter included in a WebFinger request as described in 
          <xref target="webfinger-protocol"/>.</t>

          <t>The "subject" member MUST be included in the JRD.</t>
          
          <figure><preamble>For example:</preamble><artwork><![CDATA[
  {
    ...
    "subject" : "acct:joe@example.org"
    ...
  }
]]></artwork></figure>
          
          <t>If the value of the "subject" member is not character-for-character
          equal to the identifier specified as the value of the "resource" 
          parameter in the WebFinger request, the value of the "resource" 
          parameter SHOULD be included within the array value of the "aliases"
          member (see <xref target="jrd-aliases"/>).</t>
          
        </section>
        
        <section title="aliases" anchor="jrd-aliases">
          
          <t>The value of the "aliases" member is an array of zero or more URIs or IRIs 
          that identify the same entity as the "subject" URI. Each URI must be an
          absolute URI.</t>

          <t>The server MAY include the "aliases" array in the JRD.</t>
          
          <figure><preamble>For example:</preamble><artwork><![CDATA[
  {
     ...
     "aliases": [
       "acct:sally@example.org",
       "mailto:sally@example.org",
       "http://example.org/profiles/sally"
     ]
     ...
  }
]]></artwork></figure>
          
          <t>WebFinger services MAY be implemented to allow any of the identifiers
          specified in the list of aliases to be used as the value of the 
          "resource" parameter specified in the WebFinger GET request. In such
          cases, the server SHOULD return the same resource descriptor document
          for each of the listed alias identifiers.</t>
            
          <figure><preamble>For instance, given the example listing of aliases 
          shown above, the following WebFinger requests would be equivalent:</preamble> 
          <artwork><![CDATA[
  GET /.well-known/webfinger?resource=acct:sally@example.org HTTP/1.1
  
  GET /.well-known/webfinger?resource=mailto:sally@example.org HTTP/1.1
  
  GET /.well-known/webfinger?resource=
    http://example.org/profiles/sally
]]></artwork></figure>
          
        </section>
        
        <section title="properties" anchor="jrd-properties">
          
          <t>The value of the "properties" member is an object comprised of zero 
          or more name/value pairs whose names are absolute URIs and whose values 
          are strings or null. Properties are used to convey arbitrary additional 
          information about the subject of the JRD.</t>

          <figure><preamble>For example:</preamble><artwork><![CDATA[
  {
    ...
    "properties" : { 
      "http://example.net/props/name" : "Bob Smith",
      "http://example.net/props/age" : "32"
    }
  }
]]></artwork></figure>

          <t>The server MAY include the "properties" member in the JRD.</t>
          
        </section>

        <section title="links" anchor="jrd-links">
          
          <t>The value of the "links" member is an array containing zero or 
          more objects providing information about links to associated resources. 
          Each item of the array is an object containing exactly one "href" and 
          "rel" member, and optionally containing the additional members: "type", 
          "titles" and "properties" -- each of which are described in the sections 
          that follow.</t>
          
          <figure><preamble>For example:</preamble><artwork><![CDATA[
  {
    ...
    "links": [
      {
        "rel": "blog",
        "href": "https://example.org/blogs/sally"
      },
      {
        "rel": "http://example.org/updates",
        "href": "https://example.org/activities/sally",
        "type": "application/stream+json",
        "titles": {
          "*": "Sally's Activity Stream"
        }
      }
    ]
    ...
  }
]]></artwork></figure>

          <t>The order of items within the "links" array indicates an order of
          preference.  If there are multiple link objects sharing the same "rel" 
          member value, the object appearing first within the array is to be considered
          the preferred link relation.</t>

          <t>Servers MAY include the "links" array in the JRD.</t>

          <section title="rel" anchor="jrd-links-rel">
            
            <t>The value of the required "rel" member is a string that is either a single absolute
            IRI <xref target="RFC3987"/> or a single registered relation type as defined 
            by <xref target="RFC5988"/> that indicates the nature of the relationship between 
            the resource that is the subject of the JRD document and the resource identified 
            by the "href" value.</t>
            
          </section>

          <section title="href" anchor="jrd-links-href">
            
            <t>The value of the "href" member is a string that contains an absolute URI
            pointing to the linked resource. A link object MUST contain an "href" member 
            unless the "properties" member is specified and contains one or more "rel" 
            specific name/value pairs that can be used by a client to access the linked 
            resource. Refer to <xref target="example-email"/> for a practical, non-normative 
            example of link objects that omit the "href" value.</t>

            <t>To help prevent the likelihood of TLS-downgrade attacks, if the "href" 
            member references a resource accessible via HTTP on the same domain as the 
            WebFinger service, and the resource descriptor was requested using HTTPS, 
            the "href" URI MUST use the "https" scheme.</t>

          </section>

          <section title="type" anchor="jrd-links-type">
            
            <t>The value of the optional "type" member is a string that indicates the MIME media
            type of the linked resource (see <xref target="RFC4288"/>).</t>

          </section>
          
          <section title="titles" anchor="jrd-links-titles">
            
            <t>The value of the optional "titles" member is an object comprised of zero or 
            more name/value pairs whose name is either a basic or extended language 
            range as defined by <xref target="RFC4647"/> or the string "*".  The 
            value is a human-readable label describes the link relation, written in 
            a language matching the range specified by the name. When multiple 
            language-specific titles are provided within the "titles" object, a
            client SHOULD select the title that is the most specific match to the 
            user's preferred language. The special value "*" matches all possible
            languages and is used to identify the default title that SHOULD be 
            selected if no other more language-specific titles are provided.</t>

            <t>Here is an example of the titles object:</t>

            <figure><preamble>For example:</preamble><artwork><![CDATA[
  {
    ...
    "titles" : {
      "*" : "The Magical World of Bob",
      "fr-*" : "Le monde magique de Bob"
    }
    ...
  }
]]></artwork></figure>

          </section>
          
          <section title="properties" anchor="jrd-links-properties">
            
            <t>The value of the optional "properties" member is an object comprised
            of zero or more name/value pairs whose names are absolute URIs and
            whose values are strings or null.  Properties are used to convey
            additional information about the link relation.</t>

            <figure><preamble>For example:</preamble><artwork><![CDATA[
  {
    ...
    "properties" : { "http://example.net/mail/port" : "993" }
    ...
  }
]]></artwork></figure>
            
          </section>
          
        </section> <!-- END LINKS -->
        
      </section> <!-- END JRD -->
    
    <section title="Cross-Origin Resource Sharing (CORS)" anchor="wf-and-cors">
      
      <t>WebFinger resources might not be accessible from a web browser due to
      "Same-Origin" policies.  The current best practice is to make
      resources available to browsers through Cross-Origin Resource Sharing
      (CORS) <xref target="W3C.WD-cors-20120403"/>, and servers MUST include 
      the Access-Control-Allow-Origin HTTP header in all responses.  Servers 
      SHOULD support the least restrictive setting by allowing any domain 
      access to the WebFinger resources:</t>

      <figure><artwork><![CDATA[
  Access-Control-Allow-Origin: *
]]></artwork></figure>

      <t>There are cases where defaulting to the least restrictive setting is
      not appropriate, for example a WebFinger server on a private network that
      provides sensitive company information should not allow CORS requests
      from any domain, as that could allow leaking of that sensitive
      information.  WebFinger servers that wish to restrict access to
      information from external entities can use a more restrictive
      Access-Control-Allow-Origin header.</t>
      
    </section>
    
    <section title="Access Control" anchor="access-control">
      
      <t>As with all web resources, access to the /.well-known/webfinger
      resource might require authentication.  Further, failure to provide
      required credentials can result in the server forbidding access or
      providing a different response than had the client authenticated with
      the server.</t>

      <t>Likewise, a server can provide different responses to different
      clients based on other factors, such as whether the client is inside
      or outside a corporate network.  As a concrete example, a query
      performed on the internal corporate network might return links
      to employee pictures, whereas such links might be excluded in responses
      to external entities.</t>

      <t>Further, links provided in a WebFinger server response can
      point to web resources that impose access restrictions.  For example,
      the aforementioned corporate server might provide both internal and
      external entities with URIs to employee pictures, but further
      authentication might be required in order for the client to access
      the picture resources if the request comes from outside the corporate
      network.</t>

      <t>The decisions made with respect to the exact set of metadata and links 
      a WebFinger server provides to one client versus another and what
      resources require further authentication, as well as the specific
      authentication mechanisms employed, are outside the scope of this
      document.</t>
      
    </section>
    
    <section title="Hosted WebFinger Services" anchor="hosted-services">
      
      <t>As with most services provided on the Internet, it is possible for a
      domain owner to utilize "hosted" WebFinger services.  By way of
      example, a domain owner might control most aspects of their domain,
      but use a third-party hosting service for email.  In the case of
      email, mail servers for a domain are identified by MX records.  An MX
      record points to the mail server to which mail for the domain should
      be delivered.  It does not matter to the sending mail server whether
      those MX records point to a server in the destination domain or a
      different domain.</t>

      <t>Likewise, a domain owner might utilize a third party
      to provide WebFinger services on behalf of its users. To do so, the domain 
      owner will utilize HTTP redirects to notify the client of the location
      of the hosted WebFinger service.</t>

      <t>For instance, imagine that the owners of the domain "example.org" wish
      to utilize a third party WebFinger service provided by "example.com". When 
      a client issues a query to "https://example.org/.well-known/webfinger", the 
      web server hosted at "https://example.org" will return a 301, 302, or 307 
      response status code that includes a Location header pointing to the 
      alternative location of the hosted WebFinger service URL.  The URL specified 
      does not need to point to /.well-known/* on the hosting service provider server.  
      WebFinger clients are required to follow all 301, 302, or 307 redirection 
      responses unless the redirection specifies a non-HTTPS url and the original
      request used HTTPS.</t>

      <figure><preamble>An example request:</preamble><artwork><![CDATA[
  GET /.well-known/
    webfinger?resource=acct%3Aalice%40example.org HTTP/1.1
  Host: example.org
]]></artwork></figure>

      <figure><preamble>A redirected response:</preamble><artwork><![CDATA[
  HTTP/1.1 307 Temporary Redirect
  Access-Control-Allow-Origin: *
  Location: https://wf.example.com/example.org/webfinger?
    resource=acct%3Aalice%40example.org HTTP/1.1
]]></artwork></figure>

      <t>Note that the 307 Temporary Redirect response still contains
      the Access-Control-Allow-Origin header defined by 
      <xref target="W3C.WD-cors-20120403"/>.</t>
    
    </section>
    
    <section title="Security Considerations">

      <t>Since this specification utilizes Cross-Origin Resource Sharing
      (CORS) <xref target="W3C.WD-cors-20120403"/>, all of the security 
      considerations applicable CORS are also applicable to this specification.</t>

      <t>WebFinger implementations have no means of ensuring that information
      provided by a user is accurate.  Likewise, neither the server nor the
      client can be absolutely guaranteed that information has not been
      manipulated either at the server or along the communication path
      between the client and server.  The required Use of HTTPS helps to 
      address some of the concerns with manipulation of information along 
      the communication path, but it clearly cannot address issues where the 
      server provides incorrect information, either due to being provided 
      false information or due to malicious behavior on the part of the 
      server administrator or any other party who may have gained inappropriate
      access to a compromised server. As with any information service available 
      on the Internet, users need to remain wary of information received from 
      untrusted sources.</t>
      
      <t>At the current time, there are no generally defined, implemented 
      and deployed mechanisms for ensuring the integrity of data encoded 
      within a JSON document served over HTTPS. The use of HTTPS provides 
      only limited protection against malicious access and modification of 
      the data as it is being transmitted between the server and client. At 
      the time of this writing, there are several efforts underway to define 
      methods of applying cryptographically generated signatures to JSON 
      documents but such efforts are currently incomplete.</t>

      <t>Note that in environments where HTTPS is normally available, there
      exists the possibility that a compromised network might have its
      WebFinger server operating on HTTPS replaced with one operating only
      over HTTP.  As such, clients that need to ensure that data is not
      compromised in transit SHOULD NOT issue WebFinger requests over a 
      non-secure connection.</t>

      <t>When using HTTPS, clients are required to verify that the certificate 
      used on an HTTPS connection is valid.</t>

      <t>While it is possible for WebFinger services to require authentication
      and provide access to secure, private information, it needs to be 
      recognized that the general intent and most common expected uses of the 
      WebFinger protocol will be to provide open access to publicly available 
      information about users or resources associated with a domain. Users need
      to understand the risks involved in making such information available.
      If one does not wish to share certain information with the world, do not
      all allow that information to be freely accessible via the WebFinger
      protocol. Further, WebFinger service providers MUST NOT be used to 
      provide any personal information to any party unless explicitly or 
      implicitly authorized by the person whose information is being shared. 
      Implicit authorization can be determined by the user's voluntary 
      utilization of a service as defined by that service's relevant terms of
      use of published privacy policy.</t>
      
      <t>The aforementioned word of caution is perhaps worth emphasizing again
      with respect to dynamic information one might wish to share, such as
      the current location of a user.  WebFinger can be a powerful tool
      used to assemble information about a person all in one place, but
      service providers and users should be mindful of the nature of that
      information shared and the fact that it might be available for the
      entire world to see.  Sharing location information, for example,
      can potentially put a person in danger from any individual who
      might seek to inflict harm on that person.</t>

      <t>The easy access to user information via WebFinger is a design goal
      of the protocol, not a limitation.  If one wishes to limit access to
      information available via WebFinger, such as a WebFinger service for
      use inside a corporate network, the network administrator must take
      measures necessary to limit access from outside the network.  Using
      standard methods for securing web resources, network administrators
      do have the ability to control access to resources that might return
      sensitive information.</t>
      
    </section>
    
    <section title="IANA Considerations" anchor="iana">
      
      <t>This specification registers the "webfinger" well-known URI in the
      Well-Known URI Registry as defined by <xref target="RFC5785"/>.
        <list style="symbols">
          <t>URI suffix:  webfinger</t>
          <t>Change controller:  IETF</t>
          <t>Specification document(s):  RFC QQQ</t>
          <t>Related information:  The response from WebFinger server will be a
          JSON Resource Descriptor (JRD) as described in <xref target="jrd"/> of RFC
          QQQ.</t>
        </list>
      </t>

      <t>[RFC EDITOR: Please replace "QQQ" references in this section with the
      number for this RFC.]</t>
    </section>
    
  </middle> 
  <back>
    <references title="Normative References"> 
      &rfc2119;
      &rfc2616;
      &rfc5785;
      &rfc5988;
      &rfc4627;
      &rfc3986;
      &rfc3987;
      &rfc4288;
      &rfc5646;
      &rfc3339;
      &rfc4647;
      &acct;
      &cors;
    </references>
    
    <references title="Informative References">
  &rfc6350;
  &rfc6068;
  &ieee1284;
  <reference anchor="openid-connect-mesages-1_0">
    <front>
      <title>OpenID Connect Messages 1.0 - draft 10</title>
      <author fullname="Nat Sakimura" initials="N." surname="Sakimura">
        <organization abbrev="NRI">Nomura Research Institute,
        Ltd.</organization>
        <address>
          <email>n-sakimura@nri.co.jp</email>
        </address>
      </author>
      <author fullname="John Bradley" initials="J." surname="Bradley">
        <organization abbrev="Ping Identity">Ping Identity</organization>
        <address>
          <email>ve7jtb@ve7jtb.com</email>
        </address>
      </author>
      <author fullname="Michael B. Jones" initials="M.B." surname="Jones">
        <organization abbrev="Microsoft">Microsoft</organization>
        <address>
          <email>mbj@microsoft.com</email>
        </address>
      </author>
      <author fullname="Breno de Medeiros" initials="B." surname="de Medeiros">
        <organization abbrev="Google">Google Inc.</organization>
        <address>
          <email>breno@google.com</email>
        </address>
      </author>
      <author fullname="Chuck Mortimore" initials="C." surname="Mortimore">
        <organization abbrev="Salesforce">Salesforce</organization>
        <address>
          <email>cmortimore@salesforce.com</email>
        </address>
      </author>
      <author fullname="Edmund Jay" initials="E." surname="Jay">
        <organization abbrev="Illumila">Illumila</organization>
        <address>
          <email>ejay@mgi1.com</email>
        </address>
      </author>
      <date day="25" month="May" year="2012"/>
    </front>
  </reference>

    </references>
    
    <section title="Example Use of WebFinger" anchor="examples">
      
      <t>This non-normative section shows a few sample uses of WebFinger.</t>
      
      <section title="Locating a User's Blog" anchor="example-blog">
        
        <t>Assume a user, Sally, receives an email from Bob referring to 
        a passage of text posted to his personal Weblog. Bob, however, 
        forgot to include a link to his Weblog and Sally wishes to view
        the post that includes the text. It would be simple for Sally to
        discover the location of Bob's weblog if he makes that information 
        available via WebFinger and associates it with his email address.</t> 
        
        <t>Assuming that Sally's email client implements support for the 
        WebFinger protocol, the client can issue a WebFinger query at 
        Sally's request by sending the following GET request via HTTPS to
        the domain provided in Bob's email address:</t>
        
        <figure><artwork><![CDATA[        
  GET /.well-known/webfinger?
    resource=acct%3Abob%40example.com HTTP/1.1
  Host: example.com
]]></artwork></figure>

        <t>The server might then respond with a message like this:</t>

        <figure><artwork><![CDATA[
  HTTP/1.1 200 OK
  Access-Control-Allow-Origin: *
  Content-Type: application/json; charset=UTF-8

  {
    "expires" : "2012-11-16T19:41:35Z",
    "subject" : "acct:bob@example.com",
    "aliases" : [
      "http://www.example.com/~bob/",
      "https://www.example.com/~bob/",
      "mailto:bob@example.com"
    ],
    "links" : [
      {
        "rel" : "http://webfinger.net/rel/avatar",
        "type" : "image/jpeg",
        "href" : "https://www.example.com/~bob/bob.jpg"
      },
      {
        "rel" : "http://webfinger.net/rel/profile-page",
        "href" : "https://www.example.com/~bob/"
      },
      {
        "rel" : "blog",
        "type" : "text/html",
        "href" : "https://blogs.example.com/bob/",
        "titles" : {
          "en-us" : "The Magical World of Bob",
          "fr" : "Le monde magique de Bob"
        }
      },
      {
        "rel" : "vcard",
        "href" : "https://www.example.com/~bob/bob.vcf"
      }
    ]
  }
]]></artwork></figure>

        <t>The email client can take note of the "blog" link relation in the
        above JRD that refers to Bob's blog.  This URL would then be
        presented to Sally so that she can visit Bob's Weblog.  The email
        client might also note that Bob has published an avatar link relation
        and use that picture to visually represent Bob within the email client.
        Lastly, the client might consider the vcard <xref target="RFC6350"/> 
        link relation in order to update contact information for Bob.</t>

        <t>In the above example, an "acct" URI <xref target="I-D.ietf-appsawg-acct-uri"/> 
        is used in the query, though any valid alias for the user might also be used.  
        An alias is a URI that is different from the "subject" URI that identifies 
        the same entity.  In the above example, there is one "http" alias returned,
        though there might have been more than one.  Had the "http:" URI
        shown as an alias been used to query for information about Bob, the
        query would have appeared as:</t>

        <figure><artwork><![CDATA[
  GET /.well-known/webfinger?
    resource=http%3A%2F%2Fwww.example.com%2F~bob%2F HTTP/1.1
  Host: example.com
]]></artwork></figure>

        <t>The response would have been substantially the same, with the subject
        and alias information changed as necessary.  Other information, such
        as the expiration time might also change, but the set of link
        relations and properties would be the same with either response.</t>
        
      </section>
      
      <section title="Identity Provider Discovery for OpenID Connect" anchor="example-identity">
        
        <t>Suppose Carol wishes to authenticate with a web site she visits using
        OpenID Connect <xref target="openid-connect-mesages-1_0"/>.  She would provide 
        the web site with her OpenID Connect identifier, say carol@example.com.  The 
        visited web site would perform a WebFinger query looking for the OpenID Connect
        Provider.  Since the site is interested in only one particular link
        relation, the server might utilize the "rel" parameter as described
        in section 5.3:</t>

        <figure><artwork><![CDATA[
  GET /.well-known/webfinger?
    resource=acct%3Acarol%40example.com&
    rel=http%3A%2F%2Fopenid.net%2Fspecs%2Fconnect%2F1.0%2Fissuer
    HTTP/1.1
  Host: example.com
]]></artwork></figure>

        <t>The server might respond with a JRD like this:</t>

        <figure><artwork><![CDATA[
  HTTP/1.1 200 OK 
  Access-Control-Allow-Origin: *
  Content-Type: application/json

  {
    "expires" : "2012-11-16T19:41:35Z",
    "subject" : "acct:carol@example.com",
    "aliases" : [
      "http://www.example.com/~carol/",
      "https://www.example.com/~carol/"
    ],
    "properties" : {
      "http://example.com/rel/role/" : "employee"
    },
    "links" : [
      {
        "rel" : "http://openid.net/specs/connect/1.0/issuer",
        "href" : "https://openid.example.com/"
      }
    ]
  }
]]></artwork></figure>
          
        <t>Since the "rel" parameter only filters the link relations returned by
        the server, other name/value pairs in the response, including any
        aliases or properties, would be returned.  Also, since support for
        the "rel" parameter is optional, the client must not assume the
        "links" array will contain only the requested link relation.</t>
        
      </section>
      
      <section title="Auto-Configuration of Email Clients" anchor="example-email">
        
        <t>WebFinger could be used to auto-provision an email client with basic
        configuration data.  Suppose that sue@example.com wants to configure
        her email client.  Her email client might issue the following query:</t>

        <figure><artwork><![CDATA[
  GET /.well-known/webfinger?
    resource=mailto%3Asue%40example.com HTTP/1.1
  Host: example.com
]]></artwork></figure>

        <t>The response from the server would contain entries for the various
        protocols, transport options, and security options.  If there are
        multiple options, the server might return a link relation that for
        each of the valid options and the client or Sue might select which
        option to choose.  Since JRDs list link relations in a specific
        order, then the most-preferred choices could be presented first.
        Consider this response:</t>
 
        <figure><artwork><![CDATA[
  HTTP/1.1 200 OK 
  Access-Control-Allow-Origin: *
  Content-Type: application/json
  
  {
    "subject" : "mailto:sue@example.com",
    "links" : [
      {
        "rel" : "http://example.net/rel/smtp-server",
        "properties" : {
          "http://example.net/email/host" : "smtp.example.com",
          "http://example.net/email/port" : "587",
          "http://example.net/email/login-required" : "yes",
          "http://example.net/email/transport" : "starttls"
        }
      },
      {
        "rel" : "http://example.net/rel/imap-server",
        "properties" : {
          "http://example.net/email/host" : "imap.example.com",
          "http://example.net/email/port" : "993",
          "http://example.net/email/transport" : "ssl"
        }
      }
    ]
  }
]]></artwork></figure>

        <t>In this example, the WebFinger server advertises an
        SMTP service and an IMAP service.  In this example, the "href"
        entries associated with the link relation are absent.  This is valid
        when there is no external reference that needs to be made and a 
        "properties" member is used to provide the necessary information.</t>
        
      </section>
      
      <section title="Retrieving Device Information" anchor="example-device">
        
        <t>As another example, suppose there are printers on the network and Bob
        would like to check the current toner level for a particular printer
        identified via the URI device:p1.example.com.  While the "device" URI
        scheme is not presently specified, we use it here for illustrative
        purposes.</t>

        <t>Following the procedures similar to those illustrated in previous examples, 
        a query can be issued to get link relations specific to this URI like this:</t>

        <figure><artwork><![CDATA[
  GET /.well-known/webfinger?
    resource=device%3Ap1.example.com HTTP/1.1
  Host: example.com
]]></artwork></figure>

        <t>The link relations that are returned for a device may be quite
        different than those for user accounts:</t>

        <figure><artwork><![CDATA[
  HTTP/1.1 200 OK
  Access-Control-Allow-Origin: *
  Content-Type: application/json; charset=UTF-8

  {
    "subject" : "device:p1.example.com",
    "links" : [
      {
        "rel" : "http://example.com/rel/tipsi",
        "href" : "http://192.168.1.5/npap/"
      }
    ]
  }
]]></artwork></figure>

        <t>While this example is fictitious, you can imagine that perhaps the
        Transport Independent, Printer/System Interface <xref target="IEEE.1284-1.1997"/> 
        may be enhanced with a web interface that allows a device that understands the TIP/SI
        web interface specification to query the printer for toner levels.</t>
        
      </section>
      
    </section> <!-- END EXAMPLES -->
    
    <section title="Acknowledgements" anchor="ack">
      
      <t>The authors would like to acknowledge Eran Hammer-Lahav, Blaine Cook,
      Brad Fitzpatrick, Laurent-Walter Goix, Joe Clarke, Michael B. Jones,
      Peter Saint-Andre, Dick Hardt, Tim Bray, and Joe Gregorio for their
      invaluable input.</t>
      
    </section>
    
  </back>
</rfc> 
 