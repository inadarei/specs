



Individual Submission                                         J. Reschke
Internet-Draft
Intended status: Standards Track                             A. Malhotra
Expires: August 1, 2015
                                                                J. Snell

                                                        January 28, 2015


                           HTTP SEARCH Method
                      draft-snell-search-method-00

Abstract

   This specification updates the definition and semantics of the HTTP
   SEARCH request method previously defined by [RFC5323].

Status of This Memo

   This Internet-Draft is submitted to IETF in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at http://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on August 1, 2015.

Copyright Notice

   Copyright (c) 2015 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents
   (http://trustee.ietf.org/license-info) in effect on the date of
   publication of this document.  Please review these documents
   carefully, as they describe your rights and restrictions with respect
   to this document.






Reschke, et al.          Expires August 1, 2015                 [Page 1]

Internet-Draft             HTTP SEARCH Method               January 2015


Table of Contents

   1.  Introduction  . . . . . . . . . . . . . . . . . . . . . . . .   2
   2.  Rationale . . . . . . . . . . . . . . . . . . . . . . . . . .   2
   3.  SEARCH  . . . . . . . . . . . . . . . . . . . . . . . . . . .   2
   4.  The "Accept-Search" Header Field  . . . . . . . . . . . . . .   3
   5.  Relationship to other HTTP Methods  . . . . . . . . . . . . .   3
   6.  Examples  . . . . . . . . . . . . . . . . . . . . . . . . . .   3
     6.1.  Simple SEARCH with a Direct Response  . . . . . . . . . .   3
     6.2.  Simple SEARCH with Indirect Response (303 See Other)  . .   4
     6.3.  Possible approach for a "Stored Query"  . . . . . . . . .   5
   7.  Discussion Notes  . . . . . . . . . . . . . . . . . . . . . .   6
   8.  Security Considerations . . . . . . . . . . . . . . . . . . .   6
   9.  IANA Considerations . . . . . . . . . . . . . . . . . . . . .   6
   10. Normative References  . . . . . . . . . . . . . . . . . . . .   7
   Authors' Addresses  . . . . . . . . . . . . . . . . . . . . . . .   7

1.  Introduction

   This specification updates the HTTP SEARCH method originally defined
   in [RFC5323].

   In this document, the key words "MUST", "MUST NOT", "REQUIRED",
   "SHALL", "SHALL NOT", "SHOULD", "SHOULD NOT", "RECOMMENDED", "MAY",
   and "OPTIONAL" are to be interpreted as described in [RFC2119].

2.  Rationale

   TBD

3.  SEARCH

   The SEARCH method is used to initiate a server-side search.

   The effective request URI (as defined by [RFC7230]) identifies the
   "search arbiter".  The arbiter can be any HTTP resource capable of
   performing the requested search.  The SEARCH method defines no
   relationship between this arbiter and the scope of the search;
   rather, the particular query grammar used in the query defines the
   relationship.  For example a query grammar can force the effective
   request URI to correspond exactly to the search scope.

   The body of the request defines the query.  Implementations MAY use a
   request body of any content type with the SEARCH method; however, for
   backwards compatibility with existing WebDAV implementations, SEARCH
   requests that use the text/xml or application/xml content types MUST
   be processed in exact accordance with the requirements established by
   [RFC5323].



Reschke, et al.          Expires August 1, 2015                 [Page 2]

Internet-Draft             HTTP SEARCH Method               January 2015


   SEARCH requests are both safe and idempotent.  The performance of a
   search is not expected to alter the state of the search arbiter
   identified by the effective request URI; however, while performing a
   search, the arbiter can be expected to allocate computing and memory
   resources or even create additional HTTP resources through which the
   response to the search can be retrieved.

   A successful response to a SEARCH request is expected to provide some
   indication as to the final disposition of the search operation.  For
   instance, a successful search that yields no results can be
   represented by a 204 No Content response.  If the response includes a
   body payload, the payload is expected to describe the results of the
   search operation.  In some cases, the search arbiter might choose to
   respond indirectly to the SEARCH request by returning a 3xx
   Redirection with a Location header specifying an alternate Request
   URI from which the search results can be retrieved by using an HTTP
   GET request.  Various non-normative examples of successful SEARCH
   responses are illustrated in Section 6.

   The response to a SEARCH request is not cacheable.  It ought to be
   noted, however, that because SEARCH requests are safe and idempotent,
   responses to a SEARCH SHOULD NOT invalidate previously cached
   responses to other requests directed at the same effective request
   URI.

   The semantics of the SEARCH method change to a "conditional SEARCH"
   if the request message includes an If-Modified-Since, If-Unmodified-
   Since, If-Match, If-None-Match, or If-Range header field ([RFC7232]).
   A conditional SEARCH requests that the query be performed only under
   the circumstances described by the conditional header field(s).

4.  The "Accept-Search" Header Field

   TBD

5.  Relationship to other HTTP Methods

   TBD

6.  Examples

6.1.  Simple SEARCH with a Direct Response









Reschke, et al.          Expires August 1, 2015                 [Page 3]

Internet-Draft             HTTP SEARCH Method               January 2015


   A simple SPAQRL query with a Direct Response:

   SEARCH /query HTTP/1.1
   Host: example.org
   Content-Type: application/sparql-query
   Accept: application/ld+json

   PREFIX foaf:  <http://xmlns.com/foaf/0.1/>
   SELECT ?name ?email
   FROM <http://www.w3.org/People/Berners-Lee/card>
   WHERE {
       ?person foaf:name ?name .
       OPTIONAL { ?person foaf:mbox ?email }
   } ORDER BY ?name LIMIT 10 OFFSET 10

   Response:

   TBD

6.2.  Simple SEARCH with Indirect Response (303 See Other)

   A simple SPAQRL query with an Indirect Response (303 See Other)

   SEARCH /query HTTP/1.1
   Host: example.org
   Content-Type: application/sparql-query
   Accept: application/ld+json

   PREFIX foaf:  <http://xmlns.com/foaf/0.1/>
   SELECT ?name ?email
   FROM <http://www.w3.org/People/Berners-Lee/card>
   WHERE {
       ?person foaf:name ?name .
       OPTIONAL { ?person foaf:mbox ?email }
   } ORDER BY ?name LIMIT 10 OFFSET 10

   Response:

   HTTP/1.1 303 See Other
   Location: http://example.org/query123res

   Fetch Query Response:

   GET /query123res HTTP/1.1
   Host: example.org






Reschke, et al.          Expires August 1, 2015                 [Page 4]

Internet-Draft             HTTP SEARCH Method               January 2015


   Response:

   TBD

6.3.  Possible approach for a "Stored Query"

   "Stored Queries" are one possible way that a server can implement
   SEARCH.  Essentially, a client would first create a resource
   representing a parameterized query using either PUT or POST, then
   would invoke the query using a SEARCH request.

   A simple SPAQRL query with an Indirect Response (303 See Other)

   POST /queries HTTP/1.1
   Host: example.org
   Content-Type: application/sparql-query
   Accept: application/ld+json
   Slug: Query A

   PREFIX foaf:  <http://xmlns.com/foaf/0.1/>
   SELECT ?name ?email
   FROM <http://www.w3.org/People/Berners-Lee/card>
   WHERE {
       ?person foaf:name ?name .
       OPTIONAL { ?person foaf:mbox ?email }
   } ORDER BY ?name LIMIT 10 OFFSET 10

   Response:

   HTTP/1.1 201 Created
   Location: /queries/query-a
   Accept-Query: application/x-www-form-urlencoded

   The SEARCH Request:

   SEARCH /queries/query-a HTTP/1.1
   Host: example.org
   Content-Type: application/x-www-form-urlencoded

   email=sam%40example.org

   The response to the SEARCH would return the results of executing the
   query operation using the specified input parameter.  In contrast,
   performing a GET request on the resource would return the definition
   of the stored query itself:






Reschke, et al.          Expires August 1, 2015                 [Page 5]

Internet-Draft             HTTP SEARCH Method               January 2015


   The SEARCH Request:

   GET /queries/query-a HTTP/1.1
   Host: example.org

   GET Response:

   HTTP/1.1 200 OK
   Content-Type: application/sparql-query

   PREFIX foaf:  <http://xmlns.com/foaf/0.1/>
   SELECT ?name ?email
   FROM <http://www.w3.org/People/Berners-Lee/card>
   WHERE {
       ?person foaf:name ?name .
       OPTIONAL { ?person foaf:mbox ?email }
   } ORDER BY ?name LIMIT 10 OFFSET 10

7.  Discussion Notes

   Ed.  Note: Remove this section before publication

   o  The 'Accept-Search' header field ought to be considered to signal
      a server's support for search.  It's use would be equivalent to
      that of Accept-Patch and Accept-Post... that is, to indicate the
      specific query data formats supported by a resource.

   o  Result-set truncation and paging ought to be considered.  Many
      query string based APIs support offset, limit, page or bookmark
      based truncation of results.  Do we want to require specific query
      formats to define their own truncation/paging within the query
      language (e.g.  SPARQL's limit and offset) or is there value in
      providing a generalized HTTP Range header based mechanism (e.g.
      "Range: offset=0-10" to indicate returning ten results starting at
      offset 0, or "Range: page=1" to indicate returning the first page
      of results, etc.)

8.  Security Considerations

   The SEARCH method is subject to the same general security
   considerations as all HTTP methods as described in [RFC7231].

9.  IANA Considerations

   IANA is requested to update the registration of the SEARCH method in
   the permanent registry at <http://www.iana.org/assignments/http-
   methods> (see Section 8.1 of [RFC7231]).




Reschke, et al.          Expires August 1, 2015                 [Page 6]

Internet-Draft             HTTP SEARCH Method               January 2015


            +-------------+------+------------+---------------+
            | Method Name | Safe | Idempotent | Specification |
            +-------------+------+------------+---------------+
            | SEARCH      | Yes  | Yes        | Section 3     |
            +-------------+------+------------+---------------+

10.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119, March 1997.

   [RFC4918]  Dusseault, L., "HTTP Extensions for Web Distributed
              Authoring and Versioning (WebDAV)", RFC 4918, June 2007.

   [RFC5323]  Reschke, J., Reddy, S., Davis, J., and A. Babich, "Web
              Distributed Authoring and Versioning (WebDAV) SEARCH", RFC
              5323, November 2008.

   [RFC7230]  Fielding, R. and J. Reschke, "Hypertext Transfer Protocol
              (HTTP/1.1): Message Syntax and Routing", RFC 7230, June
              2014.

   [RFC7231]  Fielding, R. and J. Reschke, "Hypertext Transfer Protocol
              (HTTP/1.1): Semantics and Content", RFC 7231, June 2014.

   [RFC7232]  Fielding, R. and J. Reschke, "Hypertext Transfer Protocol
              (HTTP/1.1): Conditional Requests", RFC 7232, June 2014.

   [RFC7234]  Fielding, R., Nottingham, M., and J. Reschke, "Hypertext
              Transfer Protocol (HTTP/1.1): Caching", RFC 7234, June
              2014.

Authors' Addresses

   Julian Reschke

   Email: julian.reschke@gmx.de


   Ashok Malhotra

   Email: ashok.malhotra@oracle.com


   James M Snell

   Email: jasnell@gmail.com




Reschke, et al.          Expires August 1, 2015                 [Page 7]